#include <stdio.h>
#include <stdlib.h>
#define MAX 1001

typedef struct {
	int i, v;
} Pos;

int n = 0, m = 0, en[MAX], em[MAX], im = 0, in = 0;
Pos maiorn[MAX], maiorm[MAX];

int soma(int *vet, int i, int size){
	int ret = 0;
	for(; i < size; i++)
		ret += vet[i];
	return ret;
}

int cmp(const void *a, const void *b){
	return ((Pos*)a)->v - ((Pos*)b)->v;
}

int quebrar(int iniL, int fimL, int iniC, int fimC){
	
	if(!in)
		return soma(em, iniC, fimC);
	
	if(!im)
		return soma(en, iniL, fimL);

	if(!in && !im)
		return 0;
	
	Pos n, m;
	
	if(in >= 0)
		n = maiorn[in];
	
	if(im >= 0)
		m = maiorm[im];
	
	if(n.v < m.v){
		im--;
		return m.v + quebrar(iniL, fimL, iniC, m.i) + quebrar(iniL, fimL, m.i + 1, fimC);
	}
	
	in--;
	return n.v + quebrar(iniL, n.i, iniC, fimC) + quebrar(n.i + 1, fimL, iniC, fimC);
}

int main(){
	
	int i = 0, j = 0, T = 0, R = 0;
	
	scanf("%d\n\n", &T);
	
	while(T--){
		scanf("%d %d", &m, &n);
		
		n--;
		m--;
		
		for(i = 0; i < m; i++){
			scanf("%d", &em[i]);
			
			maiorm[i].i = i;
			maiorm[i].v = em[i];
		}

		for(i = 0; i < n; i++){
			scanf("%d", &en[i]);
	
			maiorn[i].i = i;
			maiorn[i].v = en[i];
		}
		
		in = n - 1;
		im = m - 1;
		
		qsort(maiorm, m, sizeof(Pos), cmp);
		qsort(maiorn, n, sizeof(Pos), cmp);
		
		printf("%d\n", quebrar(0, n, 0, m));
		
	}

	return 0;
}
